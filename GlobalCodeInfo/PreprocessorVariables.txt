BlazesGlobalCode_LocalLayout:
All GlobalCode is inside same folder (old structure for local files) (Folder separated otherwise)

BlazesGlobalCode_UsePreprocessor:
Use stdafx.h precompile (inside directory outside current folder or inside same folder if BlazesGlobalCode_LocalLayout set as well)

BlazesGlobalCode_CSharpCode:
Use C# version of code

BLAZESGLOBALCODE_LIBRARY:
Compile code as dll library

IntegerList_AddBinaryFunctions:
Enable Binary Function features of IntegerList class

-------------------------------------------------Experimental SuperDec Custom Preprocessors (for CustomDec.h)--------------
CustomDec_NegativeCalculationMethod(Not Impliemented Yet)
#1 = Status Stored inside signed int positive/negative
#2 = Status Stored inside Decimal status


SuperDec_Int64:
Store whole number part as uint64

SuperDec_Int32:
Store whole number part as uint32

SuperDec_sInt64:
Store whole number part as signed int 64 (use negative/positive status as part of whole number storage instead of from  decimal status)
–9,223,372,036,854,775,808 represents negative 0.XX....

SuperDec_sInt32:
Almost same as SuperDec_sInt64 but instead with signed int 32
-2,147,483,648 represents negative 0.XX....

SuperDec_sInt16:
–32,768 represents negative 0.XX...

SuperDec_sInt8:
–128 represents negative 0.XX....

SuperDec_SignedDecimal:
Store Decimal Status as signed Int
(For 2 Dec Storage:0-99 = Positive Number;100-199 = Negative Number; 200+ = other number representations)
(Not used impliemented yet)

SuperDec_UnsignedDecimal:
Store Decimal Status as unsigned Int
(For 2 Dec  Storage:0-99 = Positive Number; -100 - -1 = Negative Number; 100 = pi; -101 = -pi)
(Default)
(Not used impliemented yet)

SuperDec_2Decimal:
Store 2 decimal places worth of values (store inside int 8)

SuperDec_4Decimal:
Store 4 decimal places worth of values (store inside int 16)

SuperDec_9Decimal:
Store 9 decimal places worth of values (store inside int 32)

SuperDec_19Decimal:
Store 19 decimal places worth of values (store inside unsigned int 64)(Requires SuperDec_Enable128BitUsage or higher to use)

SuperDec_AngleDecimal:
Store 13 decimal places worth of values (store inside sint 32 + sint 16)

CustomDec_AngleDec:
SuperDec_sInt16 + SuperDec_AngleDecimal (total 8 bytes stored of data) (only storing max 8 decimal to prevent requiring third party int 128 value to try to reduce calculation costs)
Whole value plus decimal value combined into one int 64(plus maybe boolean) for non-int based additions/subtractions plus division/multiplication calculations.

CustomDec_sInt32_9Dec:
SuperDec_sInt32+SuperDec_9Decimal

SuperDec_UnsignedBoolean:
Unsigned _int8 Variable or bool used to store Positive/Negative Status

SuperDec_SignedIntStatus:
Detect if using signed int storage for status etc (Automatically Assigned)

SuperDec_Enable128BitUsage:
Enable usage of dec classes that require more than 8 bytes for decimal storage (using External header etc)
1 : Use https://sourceforge.net/projects/cpp-bigint/ for 128 Bit Size Decimal Calculations (default when flag enabled)

SuperDec_28Decimal:
Combination of SuperDec_9Decimal+SuperDec_19Decimal used to store decimal info 

CustomDec_LargeDec_28Decimal:
SuperDec_Enable128BitUsage+SuperDec_9Decimal+SuperDec_19Decimal (Requires SuperDec_Enable128BitUsage or higher to use)

SuperDec_RequiresMoreThan64BitCalculation:
Indicates either requires more than using 8 Byte Int impliementation for calculations

SuperDec_PreventTruncationToZero:
Prevent Decimal from truncating to zero when divide too small
0 = Disabled
1 = Prevent Truncation to zero during multiplication and division(default)
2 = Perform rounding on truncated decimals(plus effect of setting of 1)

SuperDec_EnableSpecialDecimalStatus:
Enable use of some fractional and abtract storage values (such as storing pi and IntValue+1/3) 

CustomDec_sInt32_9Dec_PlusLeadingFloat:
CustomDec_sInt32_9Dec plus Quad Precision Floating formula storage for decimals after (9 Decimals of perfect storage;Rest of stored decimals with accuracry lvl of +-2% or so?)
Float Storage for extra decimal places mainly as means of prevent truncation to zero causing potential problems(Not Impliemented)

CustomDec_ExtraDec64_19Decimal:
SuperDec_PreventTruncationToZero (2) + SuperDec_RequiresMoreThan64BitCalculation + SuperDec_Enable128BitUsage + SuperDec_19Decimal + SuperDec_EnableSpecialDecimalStatus + SuperDec_UnsignedBoolean + SuperDec_Int64
(Not Impliemented as Preprocessor right now)


BlazesGlobalCode_DebugTimers:
Turn on code for adding console messages about things like operation processing time costs
(Not Impliemented yet)

BlazesGlobalCode_DebugConsole:
Display additional console messages
(Not Impliemented yet)

BlazesGlobalCode_Int128Version:
0/(NonDefined : BigInt
1 : 
2:

----C# Only based Preprocessors-------------------------------------------------------

BlazesGlobalCode_Disable128BitFeatures: Disables related classes and functions that rely on 128+ bit int etc
BlazesGlobalCode_Enable128BitFeatures: Force option code to use 128+ bit instead of trying to stay within 64 bit storage(Requires BigInteger Library)
BlazesGlobalCode_StandardExplicitConversionFrom : Limit SuperDec classes to explicit conversions from standard variable types
BlazesGlobalCode_SmallDecSliderEnableExtraFeatures
SuperDecPercentVal_EnableMultipleDecimalStatusFormulas:
SuperDecPercentVal_EnableNullAndInfinity: (Not implimented)
BlazesGlobalCode_LargeSuperDecV2AsStruct: Use LargeSuperDecV2 as Struct instead of class
BlazesGlobalCode_PercentValV2AsClass: Use PercentValV2 as Class instead of Struct
BlazesGlobalCode_SmallDec_AsClass: Use SmallDecV2 as Class instead of Struct
BlazesGlobalCode_DisableDependancyConvert: Disable DependancyConversions on SuperDec
BlazesGlobalCode_RestrictConversionBetweenSuperDec: Disable conversion of things like SmallDec into other larger versions of SuperDec
BlazesGlobalCode_PreventExtraAssemblyCopiesOfGlobalCode: Toggle for when using multiple loaded assemblies to prevent (Not Implimented yet;For use as fix for using AlternativeTypes configs with PoESkillTree->UnitTests)

---PoESkillTree Based Preprocessors-----
PoESkillTree_UseSmallDec_ForAttributes : Use SmallDec instead of float for Attribute variables
PoESkillTree_UseSmallDec_ForGeneratorBars: (Keeping floats used for bars separate from stored attributes when this is not set and PoESkillTree_UseSmallDec_ForAttributes is set;
Item Attributes mostly stored in floats when both are set unless PoESkillTree_StoreItemAttributesInSmallDec is set)
PoESkillTree_StoreItemAttributesInSmallDec : ItemAttributes stored in SmallDec instead of float (Not fully implimented yet)
PoESkillTree_UseSmallDec_ForUpdateDB : 
PoESkillTree_PreventRoundingOfImportantSmallDec: Prevent certain levels of rounding for important calculations.(Not implimented yet)
PoESkillTree_WeightAsPercRatio: Replace weight values  and csvs generator score with PercentValV2 (Not completed yet)

PoESkillTree_EnableTargetValueAsSmallDec: Use SmallDec for TargetValueContraint and weight(for ease of UI setting for both)
PoESkillTree_EnableUseNewGUIFeatures: SmallDec for Weight value etc(Disabled)

PoESkillTree_EnableMinimumValue: Enable usage of Minimum focused value feature for generator
PoESkillTree_AllowExceptionCrashes: Enable allowing generator based exceptions to crash the program(Not Implimented yet)
PoESkillTree_ExtendPseudoAttributeFeatures: (Not Implimented yet)
//XXXXXX
--------Decimal Storage notes------
(signed/unsigned) int 8 = can store 2 places (signed stores -128 to 127;unsigned stores 0 to 255)
(signed/unsigned) int 16 = can store 4 places (signed stores -32,768 to 32,767;unsigned stores 0 to 65,535)
(signed/unsigned) int 32 = can store 9 places (signed stores -2,147,483,648 to 2,147,483,647;unsigned stores 0 to 4,294,967,295)
signed int 64 = can store up to 18 places (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
unsigned int 64 = can store up to 19 places (0 to 18,446,744,073,709,551,615)