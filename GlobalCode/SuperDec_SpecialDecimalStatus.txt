(Only V2 of SuperDec types check for values BoolDecStatus values impliently during operations)

BoolDecStatusRelatedValues
0 = Normal Positive Number
1 = Normal Negative Number
For most values greator than 1
(BoolDecStatus-1)%2==0 ? IsNegativeNumber: IsPositiveNumber


{From 2-200} = IntValue (*-1 if IsNegativeNumber) + Fractional{generally DecimalStatus/BoolDecStatus but varies based on BoolDecStatus} 
{Between 2-200}
BoolDecStatus /= 2;
{Between 3-199}{BoolDecStatus%2==1}
BoolDecStatus -= 1;
BoolDecStatus /= 2;
ushort Denominator;
///-----------------------------------------------------SmallDec BoolDecStatus Values 2-200------------------------------------------------------------------------------------------
if(DecimalStatus<10000)
{
	If(DecimalStatus<1000){ Represents +- IntValue + DecimalStatus/BoolDecStatus}
	Else If(DecimalStatus<2000)
	{
		DecimalStatus -= 1000;
		Denominator = 100+BoolDecStatus;
		Represents +- IntValue + DecimalStatus/Denominator
	}
	Else If(DecimalStatus<3000)
	{
		DecimalStatus -= 2000;
		Denominator = 200+BoolDecStatus;
		Represents +- IntValue + DecimalStatus/Denominator
	}
	Else If(DecimalStatus<4000)
	{
		DecimalStatus -= 3000;
		Denominator = 300+BoolDecStatus;
		Represents +- IntValue + DecimalStatus/Denominator
	}
	Else If(DecimalStatus<5000)
	{
		DecimalStatus -= 4000;
		Denominator = 400+BoolDecStatus;
		Represents +- IntValue + DecimalStatus/Denominator
	}
		Else If(DecimalStatus<6000)
	{
		DecimalStatus -= 5000;
		Denominator = 500+BoolDecStatus;
		Represents +- IntValue + DecimalStatus/Denominator
	}
	Else If(DecimalStatus<7000)
	{
		DecimalStatus -= 6000;
		Denominator = 600+BoolDecStatus;
		Represents +- IntValue + DecimalStatus/Denominator
	}
	Else If(DecimalStatus<8000)
	{
		DecimalStatus -= 7000;
		Denominator = 700+BoolDecStatus;
		Represents +- IntValue + DecimalStatus/Denominator
	}
	Else If(DecimalStatus<9000)
	{
		DecimalStatus -= 8000;
		Denominator = 800+BoolDecStatus;
		Represents +- IntValue + DecimalStatus/Denominator
	}
	Else
	{
		DecimalStatus -= 9000;
		Denominator = 900+BoolDecStatus;
		Represents +- IntValue + DecimalStatus/Denominator
	}
}
Else If(DecimalStatus<20000)
{ 
	if(DecimalStatus<11000)
	{
		DecimalStatus -= 100000;
		Represents +- IntValue - DecimalStatus/BoolDecStatus
	}
	Else If(DecimalStatus<12000)
	{
		DecimalStatus -= 11000;
		Denominator = 100+BoolDecStatus;
		Represents +- IntValue - DecimalStatus/Denominator
	}
	Else If(DecimalStatus<13000)
	{
		DecimalStatus -= 12000;
		Denominator = 200+BoolDecStatus;
		Represents +- IntValue - DecimalStatus/Denominator
	}
	Else If(DecimalStatus<14000)
	{
		DecimalStatus -= 13000;
		Denominator = 300+BoolDecStatus;
		Represents +- IntValue - DecimalStatus/Denominator
	}
	Else If(DecimalStatus<15000)
	{
		DecimalStatus -= 14000;
		Denominator = 400+BoolDecStatus;
		Represents +- IntValue - DecimalStatus/Denominator
	}
		Else If(DecimalStatus<16000)
	{
		DecimalStatus -= 15000;
		Denominator = 500+BoolDecStatus;
		Represents +- IntValue - DecimalStatus/Denominator
	}
	Else If(DecimalStatus<17000)
	{
		DecimalStatus -= 16000;
		Denominator = 600+BoolDecStatus;
		Represents +- IntValue - DecimalStatus/Denominator
	}
	Else If(DecimalStatus<18000)
	{
		DecimalStatus -= 17000;
		Denominator = 700+BoolDecStatus;
		Represents +- IntValue - DecimalStatus/Denominator
	}
	Else If(DecimalStatus<19000)
	{
		DecimalStatus -= 18000;
		Denominator = 800+BoolDecStatus;
		Represents +- IntValue - DecimalStatus/Denominator
	}
	Else
	{
		DecimalStatus -= 19000;
		Denominator = 900+BoolDecStatus;
		Represents +- IntValue - DecimalStatus/Denominator
	}
}
Else If(DecimalStatus<30000)
{//1000+ Denominators here (And Only Odd Demominators)
}
Else If(DecimalStatus<40000)
{//1000+ Denominators here (And Only Odd Demominators)
}
If(DecimalStatus>=60000)
{ //Fractional Complex number
	If(DecimalStatus<61000)
	{
		DecimalStatus -= 60000;
		Represents +- IntValue  - (DecimalStatus /BoolDecStatus)i
	}
	Else If(DecimalStatus<62000)
	{
		DecimalStatus -= 61000;
		Denominator = 100+BoolDecStatus;
		Represents +- IntValue  - (DecimalStatus/Denominator)i
	}
	Else If(DecimalStatus<63000)
	{
		DecimalStatus -= 62000;
		Denominator = 200+BoolDecStatus;
		Represents +- IntValue  - (DecimalStatus/Denominator)i
	}
	Else If(DecimalStatus<64000)
	{
		DecimalStatus -= 63000;
		Denominator = 300+BoolDecStatus;
		Represents +- IntValue  - (DecimalStatus/Denominator)i
	}
	Else If(DecimalStatus<65000)
	{
		DecimalStatus -= 64000;
		Denominator = 400+BoolDecStatus;
		Represents +- IntValue  - (DecimalStatus/Denominator)i
	}
}
Else If(DecimalStatus>=50000)
{ //Fractional Complex number
	If(DecimalStatus<51000)
	{
		DecimalStatus -= 50000;
		Represents +- IntValue  + (DecimalStatus /BoolDecStatus)i 
	}
	Else If(DecimalStatus<52000)
	{
		DecimalStatus -= 51000;
		Denominator = 100+BoolDecStatus;
		Represents +- IntValue  + (DecimalStatus/Denominator)i
	}
	Else If(DecimalStatus<53000)
	{
		DecimalStatus -= 52000;
		Denominator = 200+BoolDecStatus;
		Represents +- IntValue  + (DecimalStatus/Denominator)i
	}
	Else If(DecimalStatus<54000)
	{
		DecimalStatus -= 53000;
		Denominator = 300+BoolDecStatus;
		Represents +- IntValue  + (DecimalStatus/Denominator)i
	}
	Else If(DecimalStatus<55000)
	{
		DecimalStatus -= 54000;
		Denominator = 400+BoolDecStatus;
		Represents +- IntValue  + (DecimalStatus/Denominator)i
	}
	Else If(DecimalStatus<56000)
	{
		DecimalStatus -= 55000;
		Denominator = 500+BoolDecStatus;
		Represents +- IntValue  + (DecimalStatus/Denominator)i
	}
	Else If(DecimalStatus<57000)
	{
		DecimalStatus -= 56000;
		Denominator = 600+BoolDecStatus;
		Represents +- IntValue  + (DecimalStatus/Denominator)i
	}
	Else If(DecimalStatus<58000)
	{
		DecimalStatus -= 57000;
		Denominator = 700+BoolDecStatus;
		Represents +- IntValue  + (DecimalStatus/Denominator)i
	}
	Else If(DecimalStatus<59000)
	{
		DecimalStatus -= 58000;
		Denominator = 800+BoolDecStatus;
		Represents +- IntValue  + (DecimalStatus/Denominator)i
	}
	Else
	{
		DecimalStatus -= 59000;
		Denominator = 900+BoolDecStatus;
		Represents +- IntValue  + (DecimalStatus/Denominator)i
	}
}
//End of Int + Fractional Status
 201 = Unused/Uninitialyzed Status
 202 = NaN
 
 
 240 = IntValue  + DecimalStatus i 
 241 = -IntValue + DecimalStatus i
 242 = IntValue  - DecimalStatus i 
 243 = -IntValue - DecimalStatus i 

246 = PI ^ IntValue.DecimalStatus
247 = -PI ^ IntValue.DecimalStatus
248 = (IntValue/DecimalStatus)
249 = -(IntValue/DecimalStatus)
250 = PI * (IntValue.DecimalStatus)
251 = -PI * (IntValue.DecimalStatus)
252 = PI * (IntValue/DecimalStatus)
253 = -PI * (IntValue/DecimalStatus)

254 = Positive Infinity
255 = Negative Infinity