        /// <summary>
        /// Converts to string.
        /// </summary>
        /// <returns>std.string</returns>
        std::string ToStringNum();

        /// <summary>
        /// Converts to string with digits filled in even when empty
        /// </summary>
        /// <returns>std.string</returns>
        std::string ToFullStringNum();

    std::string AltDec::ToStringNum()
    {
#if defined(AltDec_EnableInfinityRep)
        if (DecimalHalf == InfinityRep)
        {
            if (IntValue == 1)
                return "Infinity";
            else
                return "-Infinity";
        }
#endif
        RepType repType = GetRepType();
        switch (repType)
        {
        case RepType::ApproachingTop:
#ifdef AltDec_DisplayApproachingAsReal
            return IntValue == NegativeRep ? "-0.99999999999999999999" : VariableConversionFunctions::IntToStringConversion(IntValue) + ".99999999999999999999";
#else
            return IntValue == NegativeRep ? "-0.9___9" : VariableConversionFunctions::IntToStringConversion(IntValue) + ".9___9";
#endif
            break;
        case RepType::ApproachingBottom:
#ifdef AltDec_DisplayApproachingAsReal
            return IntValue == NegativeRep ? "-0.00000000000000000001" : VariableConversionFunctions::IntToStringConversion(IntValue) + ".00000000000000000001";
#else
            return IntValue == NegativeRep ? "-0.0___1" : VariableConversionFunctions::IntToStringConversion(IntValue) + ".0___1";
#endif
            break;
#if defined(AltDec_EnableNaN)
        case RepType::NaN:
            return "NaN";
#endif
        default:
            ConvertToNumRep();
            break;
        }
        std::string Value = "";
        int CurrentSection = IntValue;
        unsigned __int8 CurrentDigit;
        std::string DecBuffer = "";
        if (IntValue < 0)
        {
            Value += "-";
            if (IntValue == NegativeRep) { CurrentSection = 0; }
            else { CurrentSection *= -1; }
        }
        for (__int8 Index = VariableConversionFunctions::NumberOfPlaces(CurrentSection); Index >= 0; Index--)
        {
            CurrentDigit = (unsigned __int8)(CurrentSection / VariableConversionFunctions::PowerOfTens[Index]);
            CurrentSection -= (signed int)(CurrentDigit * VariableConversionFunctions::PowerOfTens[Index]);
            Value += VariableConversionFunctions::DigitAsChar(CurrentDigit);
        }
        if (DecimalHalf != 0)
        {
            Value += ".";
            CurrentSection = DecimalHalf;
            for (__int8 Index = 8; Index >= 0; --Index)
            {
                CurrentDigit = (unsigned __int8)(CurrentSection / VariableConversionFunctions::PowerOfTens[Index]);
                CurrentSection -= (signed int)(CurrentDigit * VariableConversionFunctions::PowerOfTens[Index]);
                if (CurrentDigit != 0)
                {
                    if(!DecBuffer.empty())
                    {
                        Value += DecBuffer;
                        DecBuffer.clear();
                    }
                    Value += VariableConversionFunctions::DigitAsChar(CurrentDigit);
                }
                else
                {
                    DecBuffer += VariableConversionFunctions::DigitAsChar(CurrentDigit);
                }
            }
        }
        return Value;
    }

    std::string AltDec::ToFullStringNum()
    {
#if defined(AltDec_EnableInfinityRep)
        if (DecimalHalf == InfinityRep)
        {
            if (IntValue == 1)
                return "Infinity";
            else
                return "-Infinity";
        }
#endif
        RepType repType = GetRepType();
        switch (repType)
        {
        case RepType::ApproachingTop:
#ifdef AltDec_DisplayApproachingAsReal
            return IntValue == NegativeRep ? "-0.99999999999999999999" : VariableConversionFunctions::IntToStringConversion(IntValue) + ".99999999999999999999";
#else
            return IntValue == NegativeRep ? "-0.9___9" : VariableConversionFunctions::IntToStringConversion(IntValue) + ".9___9";
#endif
            break;
        case RepType::ApproachingBottom:
#ifdef AltDec_DisplayApproachingAsReal
            return IntValue == NegativeRep ? "-0.00000000000000000001" : VariableConversionFunctions::IntToStringConversion(IntValue) + ".00000000000000000001";
#else
            return IntValue == NegativeRep ? "-0.0___1" : VariableConversionFunctions::IntToStringConversion(IntValue) + ".0___1";
#endif
            break;
#if defined(AltDec_EnableNaN)
        case RepType::NaN:
            return "NaN";
#endif
        case RepType::INum:
        case RepType::INumByDiv:
            break;
        default:
            ConvertToNumRep();
            break;
        }
        std::string Value = "";
        int CurrentSection = IntValue;
        unsigned __int8 CurrentDigit;
        if (IntValue < 0)
        {
            Value += "-";
            if (IntValue == NegativeRep) { CurrentSection = 0; }
            else { CurrentSection *= -1; }
        }
        for (__int8 Index = VariableConversionFunctions::NumberOfPlaces(CurrentSection); Index >= 0; Index--)
        {
            CurrentDigit = (unsigned __int8)(CurrentSection / VariableConversionFunctions::PowerOfTens[Index]);
            CurrentSection -= (signed int)(CurrentDigit * VariableConversionFunctions::PowerOfTens[Index]);
            Value += VariableConversionFunctions::DigitAsChar(CurrentDigit);
        }
        if (DecimalHalf != 0)
        {
            Value += ".";
            bool HasDigitsUsed = false;
            CurrentSection = DecimalHalf;
            for (__int8 Index = 8; Index >= 0; --Index)
            {
                if (CurrentSection > 0)
                {
                    CurrentDigit = (unsigned __int8)(CurrentSection / VariableConversionFunctions::PowerOfTens[Index]);
                    CurrentSection -= (CurrentDigit * VariableConversionFunctions::PowerOfTens[Index]);
                    Value += VariableConversionFunctions::DigitAsChar(CurrentDigit);
                }
                else
                    Value += "0";
            }
        }
        else
        {
            Value += ".000000000";
        }
        switch (repType)
        {
        case RepType::INum:
            Value += "i";
            break;
#if defined(AltDec_EnableByDivRep)
        case RepType::INumByDiv:
            Value += "i/";
            Value += ExtraRep*-1;
            break;
#endif
        default:
            break;
        }
        return Value;
    }
	
//        void UpdateValue(MediumDec& UpdateTarget)//Needs update to code
//        {
//            if(ExtraRep==0)
//            {
//                UpdateTarget.IntValue = IntValue; UpdateTarget.DecimalHalf = DecimalHalf;
//            }
//#ifdef AltDec_EnableInfinityRep
//            else if(DecimalHalf==InfinityRep)
//            {
//                if(IntValue==1)//If Positive Infinity, then convert number into MaximumValue instead
//                {
//                    UpdateTarget.IntValue = 2147483647; UpdateTarget.DecimalHalf = 999999999;
//                }
//                else//If Negative Infinity, then convert number into MinimumValue instead
//                {
//                    UpdateTarget.IntValue = -2147483647; UpdateTarget.DecimalHalf = 999999999;
//                }
//            }
//            else if(DecimalHalf==ApproachingValRep)
//            {
//                UpdateTarget.IntValue = IntValue; UpdateTarget.DecimalHalf = 1;
//            }
//#endif
//            else if(ExtraRep==PIRep)
//            {
//                if (DecimalHalf == 0 && IntValue == 10)
//                {
//                    UpdateTarget.IntValue = 31; UpdateTarget.DecimalHalf = 415926536;
//                }
//                else
//                {
//                    UpdateTarget.IntValue = IntValue; UpdateTarget.DecimalHalf = DecimalHalf;
//                    UpdateTarget *= MediumDec::PI;
//                }
//            }
//#if defined(AltDec_EnableNaN)
//            else if(DecimalHalf==NaNRep)//If NaN, then convert number into Nil instead
//            {
//                UpdateTarget.IntValue = InfinityRep; UpdateTarget.DecimalHalf = InfinityRep;
//            }
//#endif
//#if AltDec_EnableMixedFractional
//#if defined(AltDec_EnableImaginaryNum) || defined(AltDec_EnableENum)
//            else if(ExtraRep>0)
//#else
//            else
//#endif
//            {
//                if(DecimalHalf<0)//Mixed Fraction
//                {
//                    UpdateTarget.IntValue = DecimalHalf*-1; UpdateTarget.DecimalHalf = 0;
//                    UpdateTarget /= ExtraRep;
//                    UpdateTarget += IntValue;
//                }
//                else//Value Divided by ExtraRep
//                {
//                    UpdateTarget.IntValue = IntValue; UpdateTarget.DecimalHalf = DecimalHalf;
//                    UpdateTarget /= ExtraRep;
//                }
//            }
//#endif
//#if defined(AltDec_EnableImaginaryNum)
//#if AltDec_EnableMixedFractional
//            else//(ExtraRep<0)
//#else
//            else if(ExtraRep<0)
//#endif
//            {
//                UpdateTarget.SetVal(MediumDec::Nil);//Imaginary number representation doesn't exist for MediumDec
//            }
//#elif defined(AltDec_EnableENum)
//#if AltDec_EnableMixedFractional
//            else//(ExtraRep<0)
//#else
//            else if(ExtraRep<0)
//#endif
//            {
//                if(ExtraRep==-2147483647)
//                {
//                    UpdateTarget.IntValue = IntValue; UpdateTarget.DecimalHalf = DecimalHalf;
//                    UpdateTarget *= MediumDec::E;
//                }
//                else
//                {
//                    UpdateTarget.IntValue = IntValue; UpdateTarget.DecimalHalf = DecimalHalf;
//                    UpdateTarget *= MediumDec::E;
//                    UpdateTarget/= ExtraRep*-1;
//                }
//            }
//#endif
//        }